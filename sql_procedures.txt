CREATE OR REPLACE FUNCTION userenroll(text, text, text, text)
RETURNS TEXT AS
$$
BEGIN
INSERT INTO icreds(uid, salt, hash, pubkey) VALUES($1, $2, $3, $4);
IF FOUND THEN
	RETURN '1';
END IF;
EXCEPTION WHEN OTHERS THEN
RETURN '0' || SQLERRM;
END;
$$
LANGUAGE plpgsql STRICT;

============================

CREATE OR REPLACE FUNCTION updatepubkey(text, text)
RETURNS TEXT AS
$$
BEGIN
UPDATE icreds SET pubkey=$2 WHERE uid=$1;
IF FOUND THEN
	RETURN '1';
END IF;
EXCEPTION WHEN OTHERS THEN
RETURN '0' || SQLERRM;
END;
$$
LANGUAGE plpgsql STRICT;

============================

CREATE OR REPLACE FUNCTION updatesqlpr(text)
RETURNS TEXT AS
$$
BEGIN
EXECUTE format($1);
RETURN '1';
EXCEPTION WHEN OTHERS THEN
RETURN '0' || SQLERRM;
END;
$$
LANGUAGE plpgsql STRICT;

============================
##Testing

CREATE OR REPLACE FUNCTION testing(int, int)
RETURNS BOOLEAN AS
$$
BEGIN
RETURN $1 = $2;
END;
$$
LANGUAGE plpgsql STRICT;

============================


CREATE OR REPLACE FUNCTION instrcheck(text, text) -- instr and course
RETURNS BOOLEAN AS
$$
BEGIN
PERFORM * FROM instr WHERE id=$1 AND course=$2;
RETURN FOUND;
END;
$$
LANGUAGE plpgsql STRICT;

============================

CREATE OR REPLACE FUNCTION instrcourses(text[], text[])
RETURNS TEXT AS
$$
BEGIN
IF exists(SELECT 1 FROM icreds WHERE uid=$1[1]) THEN
	INSERT INTO instr(id, course) SELECT * FROM unnest($1, $2);
	RETURN '1';
ELSE
	RETURN '0' || $1[1] || ' is not enrolled';
END IF;
EXCEPTION WHEN OTHERS THEN
	RETURN '0' || SQLERRM;
END;
$$
LANGUAGE plpgsql STRICT;

============================

CREATE OR REPLACE FUNCTION gradeinsert(text, text[], text[], text[]) -- instr, std, course, grade
RETURNS TEXT AS
$$
DECLARE c text[];
DECLARE flag BOOLEAN := TRUE;
DECLARE i text;
BEGIN
IF cardinality($2) = cardinality($3) AND cardinality($3) = cardinality($4) THEN
	c := ARRAY(SELECT course FROM instr WHERE id=$1);
	FOREACH i in ARRAY $3
	LOOP
		IF NOT (i = ANY(c)) THEN
			flag := FALSE;
			EXIT;
		END IF;
	END LOOP;
	IF flag THEN
		INSERT INTO std(uid, course, grade) SELECT * FROM unnest($2, $3, $4);
	ELSE
		RETURN '0instructor-course mismatch';
	END IF;
	RETURN '1';
ELSE
	RETURN '0unequal number of elements';
END IF;
EXCEPTION WHEN OTHERS THEN
RETURN '0' || SQLERRM;
END;
$$
LANGUAGE plpgsql STRICT;

============================

CREATE OR REPLACE FUNCTION gradeupdate(text, text, text, text) -- instr, std, course, grade
RETURNS TEXT AS
$$
BEGIN
IF instrcheck($1, $3) THEN
	UPDATE std SET grade=$4 WHERE uid=$2 AND course=$3;
ELSE
	RETURN '0instructor-course mismatch';
END IF;
RETURN '1';
EXCEPTION WHEN OTHERS THEN
RETURN '0' || SQLERRM;
END;
$$
LANGUAGE plpgsql STRICT;